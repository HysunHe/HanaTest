<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oracle.oda.ext.dao.BlacklistMapper">
	
	<select id="listBlacklist" resultType="com.oracle.oda.ext.domains.Blacklist" databaseId="oracle">
		SELECT 
			ID as id, 
			USER_ID as user_id,
			USER_AGENT as user_agent,
			CREATED_AT as created_at,
			UPDATED_AT as updated_at
		FROM BOT_BLACKLIST
		ORDER BY CREATED_AT DESC
		OFFSET #{offset} ROWS
		FETCH NEXT #{limit} ROWS ONLY
	</select>
	
	<select id="queryByTime" resultType="com.oracle.oda.ext.domains.Blacklist" databaseId="oracle">
		SELECT 
			ID as id, 
			USER_ID as user_id,
			USER_AGENT as user_agent,
			CREATED_AT as created_at,
			UPDATED_AT as updated_at
		FROM BOT_BLACKLIST
		WHERE CREATED_AT <![CDATA[ >= ]]> #{from} AND CREATED_AT <![CDATA[ < ]]> #{to}
		ORDER BY CREATED_AT DESC
	</select>
		
	<insert id="save" parameterType="com.oracle.oda.ext.domains.Blacklist" databaseId="oracle">
	    MERGE INTO BOT_BLACKLIST d 
	    USING ( 
	    	SELECT #{id} AS ID, 
	    		#{user_id} AS USER_ID, 
	    		#{user_agent} AS USER_AGENT, 
	    		#{created_at} AS CREATED_AT, 
	    		#{updated_at} AS UPDATED_AT 
	    	FROM DUAL ) s
	    ON (s.USER_ID = d.USER_ID )
	    WHEN NOT MATCHED THEN
			INSERT
			(
				ID,
				USER_ID,
				USER_AGENT,
				CREATED_AT,
				UPDATED_AT
			) VALUES (
				s.ID,
				s.USER_ID,
				s.USER_AGENT,
				s.CREATED_AT,
				s.UPDATED_AT
			)
		WHEN MATCHED THEN
		 	UPDATE
		 	SET	USER_AGENT = s.USER_AGENT,
		 		UPDATED_AT = s.UPDATED_AT
	</insert>
	
	<delete id="unblock" parameterType="string" databaseId="oracle">
		DELETE FROM BOT_BLACKLIST WHERE USER_ID=#{user_id}
	</delete>
	
	<select id="get" resultType="com.oracle.oda.ext.domains.Blacklist" databaseId="oracle">
		SELECT 
			ID as id, 
			USER_ID as user_id,
			USER_AGENT as user_agent,
			CREATED_AT as created_at,
			UPDATED_AT as updated_at
		FROM BOT_BLACKLIST
		WHERE USER_ID=#{user_id}
	</select>
</mapper>